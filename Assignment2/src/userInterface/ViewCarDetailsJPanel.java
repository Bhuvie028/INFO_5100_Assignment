/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.CarDetails;
import model.ViewCarDetails;

/**
 *
 * @author bhuva
 */
public class ViewCarDetailsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewCarDetailsJPanel
     */
    ViewCarDetails details;
    ArrayList<CarDetails> detailList;
    
    public ViewCarDetailsJPanel(ViewCarDetails details) {
        initComponents();
        this.details = details;
        this.detailList = details.getDetails();
        ViewLayeredPane.setVisible(false);
        UpdateCarDetailsLayeredPane.setVisible(false);
        searchLayeredPaneBase.setVisible(false);
        populateTable();
        lblAvailableCars.setText("Total Available Cars :" + detailList.size());
        lblLastUpdatedTime.setText("Last Updated Time :" );
        lblCurrentAvailableCars.setText("Current Available Cars :" );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnViewCarDetailsFromTable = new javax.swing.JButton();
        btnDeleteCarDetailsFromTable = new javax.swing.JButton();
        btnViewCarDetailsFromTable1 = new javax.swing.JButton();
        ViewLayeredPane = new javax.swing.JLayeredPane();
        txtCarClassType = new javax.swing.JTextField();
        txtMaintenanceCertificateDate = new javax.swing.JTextField();
        txtNumberOfSeats = new javax.swing.JTextField();
        txtCarCurrentLocation = new javax.swing.JTextField();
        lblManufacturerName = new javax.swing.JLabel();
        lblNumberOfSeats = new javax.swing.JLabel();
        lblModelName = new javax.swing.JLabel();
        lblCarCurrentLocation = new javax.swing.JLabel();
        lblModelNumber = new javax.swing.JLabel();
        lblCarCurrentLocation1 = new javax.swing.JLabel();
        lblManufactureYear = new javax.swing.JLabel();
        txtManufacturerName = new javax.swing.JTextField();
        lblUnitsAvailable = new javax.swing.JLabel();
        txtModelName = new javax.swing.JTextField();
        txtModelNumber = new javax.swing.JTextField();
        txtManufacturerYear = new javax.swing.JTextField();
        txtUnitsAvailable = new javax.swing.JTextField();
        lblCarClassType = new javax.swing.JLabel();
        UpdateCarDetailsLayeredPane = new javax.swing.JLayeredPane();
        lblCarClassType1 = new javax.swing.JLabel();
        txtMaintenanceCertificateDateUpdate = new javax.swing.JTextField();
        yearchooser = new com.toedter.calendar.JYearChooser();
        txtCarCurrentLocationUpdate = new javax.swing.JTextField();
        btnYear = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        lblNumberOfSeats1 = new javax.swing.JLabel();
        btnGetDate = new javax.swing.JButton();
        lblCarCurrentLocation2 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        lblCarCurrentLocation3 = new javax.swing.JLabel();
        txtManufacturerNameUpdate = new javax.swing.JTextField();
        txtModelNameUpdate = new javax.swing.JTextField();
        txtModelNumberUpdate = new javax.swing.JTextField();
        txtManufacturerYearUpdate = new javax.swing.JTextField();
        txtUnitsAvailableUpdate = new javax.swing.JTextField();
        txtCarClassTypeUpdate = new javax.swing.JTextField();
        txtNumberOfSeatsUpdate = new javax.swing.JTextField();
        lblManufacturerName1 = new javax.swing.JLabel();
        lblModelName1 = new javax.swing.JLabel();
        lblModelNumber1 = new javax.swing.JLabel();
        lblManufactureYear1 = new javax.swing.JLabel();
        lblUnitsAvailable1 = new javax.swing.JLabel();
        viewScrollPane = new javax.swing.JScrollPane();
        tblCarDetails = new javax.swing.JTable();
        searchLayeredPaneBase = new javax.swing.JLayeredPane();
        chkModelName = new javax.swing.JCheckBox();
        layeredModelName = new javax.swing.JLayeredPane();
        txtSearchModelName = new javax.swing.JTextField();
        chkModelNumber = new javax.swing.JCheckBox();
        layeredModelNumber = new javax.swing.JLayeredPane();
        txtSearchModelNumber = new javax.swing.JTextField();
        chkManufactureredYear = new javax.swing.JCheckBox();
        layeredManufacturerYear = new javax.swing.JLayeredPane();
        txtSearchManufacturerYear = new javax.swing.JTextField();
        chkCarClassType = new javax.swing.JCheckBox();
        layeredCarClassType = new javax.swing.JLayeredPane();
        txtSearchCarClassType = new javax.swing.JTextField();
        chkNumberOfSeats = new javax.swing.JCheckBox();
        layeredNumberOfSeats = new javax.swing.JLayeredPane();
        txtSearchNumberOfSeatsMin = new javax.swing.JTextField();
        txtSearchNumberOfSeatsMax = new javax.swing.JTextField();
        lblMinimum = new javax.swing.JLabel();
        lblMaximum = new javax.swing.JLabel();
        btnSearchMinMax = new javax.swing.JButton();
        chkLocation = new javax.swing.JCheckBox();
        layeredLocation = new javax.swing.JLayeredPane();
        txtSearchLocation = new javax.swing.JTextField();
        chkUnitsAvailable = new javax.swing.JCheckBox();
        chkMaintenanceCertificateDate = new javax.swing.JCheckBox();
        chkManufacturerName = new javax.swing.JCheckBox();
        layeredManufacturerName = new javax.swing.JLayeredPane();
        txtSearchManufacturerName = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        lblAvailableCars = new java.awt.Label();
        lblLastUpdatedTime = new java.awt.Label();
        lblCurrentAvailableCars = new java.awt.Label();
        imgViewCar = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.red, java.awt.Color.gray));
        setForeground(new java.awt.Color(51, 153, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitle.setFont(new java.awt.Font("Courier New", 1, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 51, 51));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("View Car Details");
        lblTitle.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 34, 1561, -1));

        btnViewCarDetailsFromTable.setText("View");
        btnViewCarDetailsFromTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewCarDetailsFromTableActionPerformed(evt);
            }
        });
        add(btnViewCarDetailsFromTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(906, 352, 109, -1));

        btnDeleteCarDetailsFromTable.setText("Delete");
        btnDeleteCarDetailsFromTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCarDetailsFromTableActionPerformed(evt);
            }
        });
        add(btnDeleteCarDetailsFromTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(1136, 352, 109, -1));

        btnViewCarDetailsFromTable1.setText("Update");
        btnViewCarDetailsFromTable1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewCarDetailsFromTable1ActionPerformed(evt);
            }
        });
        add(btnViewCarDetailsFromTable1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1021, 352, 109, -1));

        txtCarClassType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCarClassTypeActionPerformed(evt);
            }
        });
        txtCarClassType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCarClassTypeKeyTyped(evt);
            }
        });

        txtMaintenanceCertificateDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaintenanceCertificateDateActionPerformed(evt);
            }
        });
        txtMaintenanceCertificateDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMaintenanceCertificateDateKeyTyped(evt);
            }
        });

        txtNumberOfSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumberOfSeatsActionPerformed(evt);
            }
        });
        txtNumberOfSeats.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumberOfSeatsKeyTyped(evt);
            }
        });

        txtCarCurrentLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCarCurrentLocationActionPerformed(evt);
            }
        });
        txtCarCurrentLocation.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCarCurrentLocationKeyTyped(evt);
            }
        });

        lblManufacturerName.setForeground(new java.awt.Color(255, 0, 102));
        lblManufacturerName.setText("Manufacturer Name :");

        lblNumberOfSeats.setForeground(new java.awt.Color(204, 0, 51));
        lblNumberOfSeats.setText("Number Of Seats :");

        lblModelName.setForeground(new java.awt.Color(255, 0, 51));
        lblModelName.setText("Model Name :");

        lblCarCurrentLocation.setForeground(new java.awt.Color(255, 0, 51));
        lblCarCurrentLocation.setText("Car Current Location :");

        lblModelNumber.setForeground(new java.awt.Color(255, 0, 51));
        lblModelNumber.setText("Model Number:");

        lblCarCurrentLocation1.setForeground(new java.awt.Color(255, 0, 51));
        lblCarCurrentLocation1.setText("Maintenance Certificate Date :");

        lblManufactureYear.setForeground(new java.awt.Color(255, 0, 102));
        lblManufactureYear.setText("Manufacture Year :");

        txtManufacturerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtManufacturerNameActionPerformed(evt);
            }
        });
        txtManufacturerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtManufacturerNameKeyTyped(evt);
            }
        });

        lblUnitsAvailable.setForeground(new java.awt.Color(255, 0, 51));
        lblUnitsAvailable.setText("Units Available :");

        txtModelName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelNameActionPerformed(evt);
            }
        });
        txtModelName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtModelNameKeyTyped(evt);
            }
        });

        txtModelNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelNumberActionPerformed(evt);
            }
        });
        txtModelNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtModelNumberKeyTyped(evt);
            }
        });

        txtManufacturerYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtManufacturerYearActionPerformed(evt);
            }
        });
        txtManufacturerYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtManufacturerYearKeyTyped(evt);
            }
        });

        txtUnitsAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUnitsAvailableActionPerformed(evt);
            }
        });
        txtUnitsAvailable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtUnitsAvailableKeyTyped(evt);
            }
        });

        lblCarClassType.setForeground(new java.awt.Color(255, 0, 51));
        lblCarClassType.setText("Class Type :");

        ViewLayeredPane.setLayer(txtCarClassType, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(txtMaintenanceCertificateDate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(txtNumberOfSeats, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(txtCarCurrentLocation, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(lblManufacturerName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(lblNumberOfSeats, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(lblModelName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(lblCarCurrentLocation, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(lblModelNumber, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(lblCarCurrentLocation1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(lblManufactureYear, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(txtManufacturerName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(lblUnitsAvailable, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(txtModelName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(txtModelNumber, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(txtManufacturerYear, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(txtUnitsAvailable, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ViewLayeredPane.setLayer(lblCarClassType, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout ViewLayeredPaneLayout = new javax.swing.GroupLayout(ViewLayeredPane);
        ViewLayeredPane.setLayout(ViewLayeredPaneLayout);
        ViewLayeredPaneLayout.setHorizontalGroup(
            ViewLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ViewLayeredPaneLayout.createSequentialGroup()
                .addContainerGap(78, Short.MAX_VALUE)
                .addGroup(ViewLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCarCurrentLocation1)
                    .addComponent(lblCarCurrentLocation)
                    .addComponent(lblNumberOfSeats)
                    .addComponent(lblCarClassType)
                    .addComponent(lblUnitsAvailable)
                    .addComponent(lblManufactureYear)
                    .addComponent(lblModelNumber)
                    .addComponent(lblModelName)
                    .addComponent(lblManufacturerName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ViewLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ViewLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtCarCurrentLocation, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtNumberOfSeats, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtCarClassType, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtUnitsAvailable, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtManufacturerYear, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtModelNumber, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtManufacturerName, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtMaintenanceCertificateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtModelName, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );
        ViewLayeredPaneLayout.setVerticalGroup(
            ViewLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewLayeredPaneLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(ViewLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblManufacturerName)
                    .addComponent(txtManufacturerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ViewLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblModelName)
                    .addComponent(txtModelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(ViewLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblModelNumber)
                    .addComponent(txtModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(ViewLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblManufactureYear)
                    .addComponent(txtManufacturerYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(ViewLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUnitsAvailable)
                    .addComponent(txtUnitsAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ViewLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCarClassType)
                    .addComponent(txtCarClassType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ViewLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumberOfSeats)
                    .addComponent(txtNumberOfSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ViewLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCarCurrentLocation)
                    .addComponent(txtCarCurrentLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ViewLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCarCurrentLocation1)
                    .addComponent(txtMaintenanceCertificateDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(74, Short.MAX_VALUE))
        );

        add(ViewLayeredPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 382, -1, -1));

        lblCarClassType1.setForeground(new java.awt.Color(255, 0, 51));
        lblCarClassType1.setText("Class Type :");

        txtMaintenanceCertificateDateUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaintenanceCertificateDateUpdateActionPerformed(evt);
            }
        });
        txtMaintenanceCertificateDateUpdate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMaintenanceCertificateDateUpdateKeyTyped(evt);
            }
        });

        txtCarCurrentLocationUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCarCurrentLocationUpdateActionPerformed(evt);
            }
        });

        btnYear.setText("Get Year");
        btnYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYearActionPerformed(evt);
            }
        });

        lblNumberOfSeats1.setForeground(new java.awt.Color(255, 0, 0));
        lblNumberOfSeats1.setText("Number Of Seats :");

        btnGetDate.setText("Get Date");
        btnGetDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetDateActionPerformed(evt);
            }
        });

        lblCarCurrentLocation2.setForeground(new java.awt.Color(255, 0, 51));
        lblCarCurrentLocation2.setText("Car Current Location :");

        btnSave.setText("Update");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblCarCurrentLocation3.setForeground(new java.awt.Color(255, 0, 0));
        lblCarCurrentLocation3.setText("Maintenance Certificate Date :");

        txtManufacturerNameUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtManufacturerNameUpdateActionPerformed(evt);
            }
        });
        txtManufacturerNameUpdate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtManufacturerNameUpdateKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtManufacturerNameUpdateKeyTyped(evt);
            }
        });

        txtModelNameUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelNameUpdateActionPerformed(evt);
            }
        });

        txtModelNumberUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelNumberUpdateActionPerformed(evt);
            }
        });

        txtManufacturerYearUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtManufacturerYearUpdateActionPerformed(evt);
            }
        });
        txtManufacturerYearUpdate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtManufacturerYearUpdateKeyTyped(evt);
            }
        });

        txtUnitsAvailableUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUnitsAvailableUpdateActionPerformed(evt);
            }
        });

        txtCarClassTypeUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCarClassTypeUpdateActionPerformed(evt);
            }
        });

        txtNumberOfSeatsUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumberOfSeatsUpdateActionPerformed(evt);
            }
        });
        txtNumberOfSeatsUpdate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumberOfSeatsUpdateKeyTyped(evt);
            }
        });

        lblManufacturerName1.setForeground(new java.awt.Color(255, 0, 51));
        lblManufacturerName1.setText("Manufacturer Name :");

        lblModelName1.setForeground(new java.awt.Color(255, 0, 51));
        lblModelName1.setText("Model Name :");

        lblModelNumber1.setForeground(new java.awt.Color(204, 0, 51));
        lblModelNumber1.setText("Model Number:");

        lblManufactureYear1.setForeground(new java.awt.Color(255, 0, 51));
        lblManufactureYear1.setText("Manufacture Year :");

        lblUnitsAvailable1.setForeground(new java.awt.Color(255, 0, 51));
        lblUnitsAvailable1.setText("Units Available :");

        UpdateCarDetailsLayeredPane.setLayer(lblCarClassType1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(txtMaintenanceCertificateDateUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(yearchooser, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(txtCarCurrentLocationUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(btnYear, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(jDateChooser1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(lblNumberOfSeats1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(btnGetDate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(lblCarCurrentLocation2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(btnSave, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(lblCarCurrentLocation3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(txtManufacturerNameUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(txtModelNameUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(txtModelNumberUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(txtManufacturerYearUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(txtUnitsAvailableUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(txtCarClassTypeUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(txtNumberOfSeatsUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(lblManufacturerName1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(lblModelName1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(lblModelNumber1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(lblManufactureYear1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        UpdateCarDetailsLayeredPane.setLayer(lblUnitsAvailable1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout UpdateCarDetailsLayeredPaneLayout = new javax.swing.GroupLayout(UpdateCarDetailsLayeredPane);
        UpdateCarDetailsLayeredPane.setLayout(UpdateCarDetailsLayeredPaneLayout);
        UpdateCarDetailsLayeredPaneLayout.setHorizontalGroup(
            UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateCarDetailsLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCarCurrentLocation3)
                    .addComponent(lblCarCurrentLocation2)
                    .addComponent(lblNumberOfSeats1)
                    .addComponent(lblCarClassType1)
                    .addComponent(lblUnitsAvailable1)
                    .addComponent(lblManufactureYear1)
                    .addComponent(lblModelNumber1)
                    .addComponent(lblModelName1)
                    .addComponent(lblManufacturerName1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnSave)
                        .addComponent(txtModelNumberUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtUnitsAvailableUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCarClassTypeUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtNumberOfSeatsUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCarCurrentLocationUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(UpdateCarDetailsLayeredPaneLayout.createSequentialGroup()
                            .addComponent(txtManufacturerYearUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(yearchooser, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UpdateCarDetailsLayeredPaneLayout.createSequentialGroup()
                            .addComponent(txtMaintenanceCertificateDateUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnGetDate)))
                    .addGroup(UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtManufacturerNameUpdate, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtModelNameUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        UpdateCarDetailsLayeredPaneLayout.setVerticalGroup(
            UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateCarDetailsLayeredPaneLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblManufacturerName1)
                    .addComponent(txtManufacturerNameUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblModelName1)
                    .addComponent(txtModelNameUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblModelNumber1)
                    .addComponent(txtModelNumberUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblManufactureYear1)
                        .addComponent(txtManufacturerYearUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(yearchooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnYear, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUnitsAvailable1)
                    .addComponent(txtUnitsAvailableUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCarClassType1)
                    .addComponent(txtCarClassTypeUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumberOfSeats1)
                    .addComponent(txtNumberOfSeatsUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCarCurrentLocation2)
                    .addComponent(txtCarCurrentLocationUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCarCurrentLocation3)
                    .addComponent(btnGetDate, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(UpdateCarDetailsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtMaintenanceCertificateDateUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnSave)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        add(UpdateCarDetailsLayeredPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(459, 382, -1, -1));

        tblCarDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Manufacturer Name", "Model Name", "Model Number", "Manufacturer Year", "Units Available", "Class Type", "Number OF Seats", "Car Location", "Maintenance Certificate Date"
            }
        ));
        viewScrollPane.setViewportView(tblCarDetails);
        if (tblCarDetails.getColumnModel().getColumnCount() > 0) {
            tblCarDetails.getColumnModel().getColumn(7).setResizable(false);
        }

        add(viewScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 81, 1561, 253));

        chkModelName.setForeground(new java.awt.Color(255, 0, 0));
        chkModelName.setText("Model Name");
        chkModelName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkModelNameActionPerformed(evt);
            }
        });

        txtSearchModelName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchModelNameKeyReleased(evt);
            }
        });

        layeredModelName.setLayer(txtSearchModelName, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layeredModelNameLayout = new javax.swing.GroupLayout(layeredModelName);
        layeredModelName.setLayout(layeredModelNameLayout);
        layeredModelNameLayout.setHorizontalGroup(
            layeredModelNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtSearchModelName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
        );
        layeredModelNameLayout.setVerticalGroup(
            layeredModelNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtSearchModelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        chkModelNumber.setForeground(new java.awt.Color(255, 0, 51));
        chkModelNumber.setText("Model Number");
        chkModelNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkModelNumberActionPerformed(evt);
            }
        });

        txtSearchModelNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchModelNumberActionPerformed(evt);
            }
        });
        txtSearchModelNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchModelNumberKeyReleased(evt);
            }
        });

        layeredModelNumber.setLayer(txtSearchModelNumber, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layeredModelNumberLayout = new javax.swing.GroupLayout(layeredModelNumber);
        layeredModelNumber.setLayout(layeredModelNumberLayout);
        layeredModelNumberLayout.setHorizontalGroup(
            layeredModelNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtSearchModelNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
        );
        layeredModelNumberLayout.setVerticalGroup(
            layeredModelNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtSearchModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        chkManufactureredYear.setForeground(new java.awt.Color(204, 0, 51));
        chkManufactureredYear.setText("Manufacturer Year");
        chkManufactureredYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkManufactureredYearActionPerformed(evt);
            }
        });

        txtSearchManufacturerYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchManufacturerYearActionPerformed(evt);
            }
        });
        txtSearchManufacturerYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchManufacturerYearKeyReleased(evt);
            }
        });

        layeredManufacturerYear.setLayer(txtSearchManufacturerYear, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layeredManufacturerYearLayout = new javax.swing.GroupLayout(layeredManufacturerYear);
        layeredManufacturerYear.setLayout(layeredManufacturerYearLayout);
        layeredManufacturerYearLayout.setHorizontalGroup(
            layeredManufacturerYearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtSearchManufacturerYear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
        );
        layeredManufacturerYearLayout.setVerticalGroup(
            layeredManufacturerYearLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtSearchManufacturerYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        chkCarClassType.setForeground(new java.awt.Color(255, 0, 0));
        chkCarClassType.setText("Car Class Type");
        chkCarClassType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCarClassTypeActionPerformed(evt);
            }
        });

        txtSearchCarClassType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchCarClassTypeActionPerformed(evt);
            }
        });
        txtSearchCarClassType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchCarClassTypeKeyReleased(evt);
            }
        });

        layeredCarClassType.setLayer(txtSearchCarClassType, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layeredCarClassTypeLayout = new javax.swing.GroupLayout(layeredCarClassType);
        layeredCarClassType.setLayout(layeredCarClassTypeLayout);
        layeredCarClassTypeLayout.setHorizontalGroup(
            layeredCarClassTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtSearchCarClassType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
        );
        layeredCarClassTypeLayout.setVerticalGroup(
            layeredCarClassTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtSearchCarClassType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        chkNumberOfSeats.setForeground(new java.awt.Color(255, 0, 51));
        chkNumberOfSeats.setText("Number Of Seats");
        chkNumberOfSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNumberOfSeatsActionPerformed(evt);
            }
        });

        txtSearchNumberOfSeatsMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchNumberOfSeatsMinActionPerformed(evt);
            }
        });
        txtSearchNumberOfSeatsMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchNumberOfSeatsMinKeyTyped(evt);
            }
        });

        txtSearchNumberOfSeatsMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchNumberOfSeatsMaxActionPerformed(evt);
            }
        });
        txtSearchNumberOfSeatsMax.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchNumberOfSeatsMaxKeyTyped(evt);
            }
        });

        lblMinimum.setForeground(new java.awt.Color(102, 204, 0));
        lblMinimum.setText("min");

        lblMaximum.setForeground(new java.awt.Color(51, 255, 51));
        lblMaximum.setText("max");

        btnSearchMinMax.setText("Ok");
        btnSearchMinMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchMinMaxActionPerformed(evt);
            }
        });

        layeredNumberOfSeats.setLayer(txtSearchNumberOfSeatsMin, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layeredNumberOfSeats.setLayer(txtSearchNumberOfSeatsMax, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layeredNumberOfSeats.setLayer(lblMinimum, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layeredNumberOfSeats.setLayer(lblMaximum, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layeredNumberOfSeats.setLayer(btnSearchMinMax, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layeredNumberOfSeatsLayout = new javax.swing.GroupLayout(layeredNumberOfSeats);
        layeredNumberOfSeats.setLayout(layeredNumberOfSeatsLayout);
        layeredNumberOfSeatsLayout.setHorizontalGroup(
            layeredNumberOfSeatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layeredNumberOfSeatsLayout.createSequentialGroup()
                .addComponent(txtSearchNumberOfSeatsMin, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMinimum)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSearchNumberOfSeatsMax, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMaximum)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearchMinMax)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layeredNumberOfSeatsLayout.setVerticalGroup(
            layeredNumberOfSeatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layeredNumberOfSeatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtSearchNumberOfSeatsMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txtSearchNumberOfSeatsMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblMinimum)
                .addComponent(lblMaximum)
                .addComponent(btnSearchMinMax))
        );

        chkLocation.setForeground(new java.awt.Color(255, 0, 0));
        chkLocation.setText("Location");
        chkLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLocationActionPerformed(evt);
            }
        });

        txtSearchLocation.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchLocationKeyReleased(evt);
            }
        });

        layeredLocation.setLayer(txtSearchLocation, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layeredLocationLayout = new javax.swing.GroupLayout(layeredLocation);
        layeredLocation.setLayout(layeredLocationLayout);
        layeredLocationLayout.setHorizontalGroup(
            layeredLocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtSearchLocation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
        );
        layeredLocationLayout.setVerticalGroup(
            layeredLocationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtSearchLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        chkUnitsAvailable.setForeground(new java.awt.Color(255, 0, 51));
        chkUnitsAvailable.setText("First Available Car");
        chkUnitsAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkUnitsAvailableActionPerformed(evt);
            }
        });

        chkMaintenanceCertificateDate.setForeground(new java.awt.Color(255, 0, 0));
        chkMaintenanceCertificateDate.setText("Expired Certificate Date");
        chkMaintenanceCertificateDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMaintenanceCertificateDateActionPerformed(evt);
            }
        });

        chkManufacturerName.setForeground(new java.awt.Color(204, 0, 0));
        chkManufacturerName.setText("Manufacturer Name");
        chkManufacturerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkManufacturerNameActionPerformed(evt);
            }
        });

        txtSearchManufacturerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchManufacturerNameActionPerformed(evt);
            }
        });
        txtSearchManufacturerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchManufacturerNameKeyReleased(evt);
            }
        });

        layeredManufacturerName.setLayer(txtSearchManufacturerName, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layeredManufacturerNameLayout = new javax.swing.GroupLayout(layeredManufacturerName);
        layeredManufacturerName.setLayout(layeredManufacturerNameLayout);
        layeredManufacturerNameLayout.setHorizontalGroup(
            layeredManufacturerNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtSearchManufacturerName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
        );
        layeredManufacturerNameLayout.setVerticalGroup(
            layeredManufacturerNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtSearchManufacturerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        searchLayeredPaneBase.setLayer(chkModelName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        searchLayeredPaneBase.setLayer(layeredModelName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        searchLayeredPaneBase.setLayer(chkModelNumber, javax.swing.JLayeredPane.DEFAULT_LAYER);
        searchLayeredPaneBase.setLayer(layeredModelNumber, javax.swing.JLayeredPane.DEFAULT_LAYER);
        searchLayeredPaneBase.setLayer(chkManufactureredYear, javax.swing.JLayeredPane.DEFAULT_LAYER);
        searchLayeredPaneBase.setLayer(layeredManufacturerYear, javax.swing.JLayeredPane.DEFAULT_LAYER);
        searchLayeredPaneBase.setLayer(chkCarClassType, javax.swing.JLayeredPane.DEFAULT_LAYER);
        searchLayeredPaneBase.setLayer(layeredCarClassType, javax.swing.JLayeredPane.DEFAULT_LAYER);
        searchLayeredPaneBase.setLayer(chkNumberOfSeats, javax.swing.JLayeredPane.DEFAULT_LAYER);
        searchLayeredPaneBase.setLayer(layeredNumberOfSeats, javax.swing.JLayeredPane.DEFAULT_LAYER);
        searchLayeredPaneBase.setLayer(chkLocation, javax.swing.JLayeredPane.DEFAULT_LAYER);
        searchLayeredPaneBase.setLayer(layeredLocation, javax.swing.JLayeredPane.DEFAULT_LAYER);
        searchLayeredPaneBase.setLayer(chkUnitsAvailable, javax.swing.JLayeredPane.DEFAULT_LAYER);
        searchLayeredPaneBase.setLayer(chkMaintenanceCertificateDate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        searchLayeredPaneBase.setLayer(chkManufacturerName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        searchLayeredPaneBase.setLayer(layeredManufacturerName, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout searchLayeredPaneBaseLayout = new javax.swing.GroupLayout(searchLayeredPaneBase);
        searchLayeredPaneBase.setLayout(searchLayeredPaneBaseLayout);
        searchLayeredPaneBaseLayout.setHorizontalGroup(
            searchLayeredPaneBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchLayeredPaneBaseLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(searchLayeredPaneBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchLayeredPaneBaseLayout.createSequentialGroup()
                        .addComponent(chkManufacturerName)
                        .addGap(32, 32, 32)
                        .addComponent(layeredManufacturerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(searchLayeredPaneBaseLayout.createSequentialGroup()
                        .addComponent(chkLocation)
                        .addGap(93, 93, 93)
                        .addComponent(layeredLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(searchLayeredPaneBaseLayout.createSequentialGroup()
                        .addComponent(chkNumberOfSeats)
                        .addGap(45, 45, 45)
                        .addComponent(layeredNumberOfSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(searchLayeredPaneBaseLayout.createSequentialGroup()
                        .addComponent(chkCarClassType)
                        .addGap(55, 55, 55)
                        .addComponent(layeredCarClassType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(searchLayeredPaneBaseLayout.createSequentialGroup()
                        .addComponent(chkManufactureredYear)
                        .addGap(40, 40, 40)
                        .addComponent(layeredManufacturerYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(searchLayeredPaneBaseLayout.createSequentialGroup()
                        .addComponent(chkModelNumber)
                        .addGap(59, 59, 59)
                        .addComponent(layeredModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(searchLayeredPaneBaseLayout.createSequentialGroup()
                        .addComponent(chkModelName)
                        .addGap(69, 69, 69)
                        .addComponent(layeredModelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(chkUnitsAvailable)
                    .addComponent(chkMaintenanceCertificateDate))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        searchLayeredPaneBaseLayout.setVerticalGroup(
            searchLayeredPaneBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchLayeredPaneBaseLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(searchLayeredPaneBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(layeredManufacturerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkManufacturerName))
                .addGap(0, 0, 0)
                .addGroup(searchLayeredPaneBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(layeredModelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkModelName))
                .addGap(0, 0, 0)
                .addGroup(searchLayeredPaneBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(layeredModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkModelNumber))
                .addGap(0, 0, 0)
                .addGroup(searchLayeredPaneBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(layeredManufacturerYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkManufactureredYear))
                .addGap(0, 0, 0)
                .addGroup(searchLayeredPaneBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(layeredCarClassType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkCarClassType))
                .addGap(0, 0, 0)
                .addGroup(searchLayeredPaneBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(layeredNumberOfSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkNumberOfSeats))
                .addGap(0, 0, 0)
                .addGroup(searchLayeredPaneBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(layeredLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkLocation))
                .addGap(0, 0, 0)
                .addComponent(chkUnitsAvailable)
                .addGap(0, 0, 0)
                .addComponent(chkMaintenanceCertificateDate)
                .addContainerGap(156, Short.MAX_VALUE))
        );

        searchLayeredPaneBaseLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {chkModelName, layeredModelName});

        add(searchLayeredPaneBase, new org.netbeans.lib.awtextra.AbsoluteConstraints(912, 382, -1, -1));

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(791, 352, 109, -1));

        lblAvailableCars.setAlignment(java.awt.Label.CENTER);
        lblAvailableCars.setForeground(new java.awt.Color(0, 51, 51));
        lblAvailableCars.setText("label1");
        add(lblAvailableCars, new org.netbeans.lib.awtextra.AbsoluteConstraints(202, 352, 240, -1));

        lblLastUpdatedTime.setForeground(new java.awt.Color(51, 51, 51));
        lblLastUpdatedTime.setText("label1");
        add(lblLastUpdatedTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 352, 173, -1));
        lblLastUpdatedTime.getAccessibleContext().setAccessibleName("");

        lblCurrentAvailableCars.setAlignment(java.awt.Label.CENTER);
        lblCurrentAvailableCars.setForeground(new java.awt.Color(0, 51, 51));
        lblCurrentAvailableCars.setText("label1");
        add(lblCurrentAvailableCars, new org.netbeans.lib.awtextra.AbsoluteConstraints(459, 352, 199, -1));

        imgViewCar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/FOrmula 1.jpeg"))); // NOI18N
        add(imgViewCar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1590, 1050));
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewCarDetailsFromTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewCarDetailsFromTableActionPerformed
        // TODO add your handling code here:
        UpdateCarDetailsLayeredPane.setVisible(false);
        ViewLayeredPane.setVisible(true);
        int selectedRowIndex = tblCarDetails.getSelectedRow();
        if (selectedRowIndex <0){
            JOptionPane.showMessageDialog(this, "Please Select a row to view");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblCarDetails.getModel();
        CarDetails selectedCarDetails = (CarDetails)model.getValueAt(selectedRowIndex, 0);
        txtManufacturerName.setText(selectedCarDetails.getManufacturerName());
        txtModelName.setText(selectedCarDetails.getModelName());
        txtModelNumber.setText(selectedCarDetails.getModelNumber());
        txtManufacturerYear.setText(selectedCarDetails.getManufacturerYear());
        txtUnitsAvailable.setText(String.valueOf(selectedCarDetails.getUnitsAvailable()));
        txtCarClassType.setText(selectedCarDetails.getCarClassType());
        txtNumberOfSeats.setText(String.valueOf(selectedCarDetails.getNumberOfSeats()));
        txtCarCurrentLocation.setText(selectedCarDetails.getLocation());
        txtMaintenanceCertificateDate.setText(selectedCarDetails.getMaintenanceCertificateDate());
        lblCurrentAvailableCars.setText("Current Available car:" + String.valueOf(Math.floor(Math.random()*(model.getRowCount()-0+1)+0)));
    }//GEN-LAST:event_btnViewCarDetailsFromTableActionPerformed

    private void txtMaintenanceCertificateDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaintenanceCertificateDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaintenanceCertificateDateActionPerformed

    private void txtMaintenanceCertificateDateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaintenanceCertificateDateKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if((Character.isDigit(value))||(Character.isAlphabetic(value)) || (!Character.isDigit(value))){
            evt.consume();
        }
    }//GEN-LAST:event_txtMaintenanceCertificateDateKeyTyped

    private void txtCarCurrentLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCarCurrentLocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCarCurrentLocationActionPerformed

    private void txtManufacturerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtManufacturerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtManufacturerNameActionPerformed

    private void txtManufacturerNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtManufacturerNameKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if((Character.isDigit(value))||(Character.isAlphabetic(value))|| (!Character.isDigit(value))){
            evt.consume();
        }
    }//GEN-LAST:event_txtManufacturerNameKeyTyped

    private void txtModelNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelNameActionPerformed

    private void txtModelNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelNumberActionPerformed

    private void txtManufacturerYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtManufacturerYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtManufacturerYearActionPerformed

    private void txtManufacturerYearKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtManufacturerYearKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if((Character.isDigit(value))||(Character.isAlphabetic(value))|| (!Character.isDigit(value))){
            evt.consume();
        }
    }//GEN-LAST:event_txtManufacturerYearKeyTyped

    private void txtUnitsAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUnitsAvailableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUnitsAvailableActionPerformed

    private void txtCarClassTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCarClassTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCarClassTypeActionPerformed

    private void txtNumberOfSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumberOfSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumberOfSeatsActionPerformed

    private void txtNumberOfSeatsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumberOfSeatsKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if((Character.isDigit(value))||(Character.isAlphabetic(value))|| (!Character.isDigit(value))){
            evt.consume();
        }
    }//GEN-LAST:event_txtNumberOfSeatsKeyTyped

    private void btnDeleteCarDetailsFromTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCarDetailsFromTableActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCarDetails.getSelectedRow();
        if (selectedRowIndex <0){
            JOptionPane.showMessageDialog(this, "Please Select a row to delete");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblCarDetails.getModel();
        CarDetails selectedCarDetails = (CarDetails)model.getValueAt(selectedRowIndex, 0);
        details.deleteCarDetails(selectedCarDetails);
        JOptionPane.showMessageDialog(this, "Car Details Deleted");
        populateTable();
        lblAvailableCars.setText("Total Available Cars :" + detailList.size());
        lblCurrentAvailableCars.setText("Current Available car:" + String.valueOf(Math.floor(Math.random()*(model.getRowCount()-0+1)+0)));
    }//GEN-LAST:event_btnDeleteCarDetailsFromTableActionPerformed

    private void txtModelNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtModelNameKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if((Character.isDigit(value))||(Character.isAlphabetic(value))|| (!Character.isDigit(value))){
            evt.consume();
        }
    }//GEN-LAST:event_txtModelNameKeyTyped

    private void txtModelNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtModelNumberKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if((Character.isDigit(value))||(Character.isAlphabetic(value))|| (!Character.isDigit(value))){
            evt.consume();
        }
    }//GEN-LAST:event_txtModelNumberKeyTyped

    private void txtUnitsAvailableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUnitsAvailableKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if((Character.isDigit(value))||(Character.isAlphabetic(value))|| (!Character.isDigit(value))){
            evt.consume();
        }
    }//GEN-LAST:event_txtUnitsAvailableKeyTyped

    private void txtCarClassTypeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCarClassTypeKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if((Character.isDigit(value))||(Character.isAlphabetic(value))|| (!Character.isDigit(value))){
            evt.consume();
        }
    }//GEN-LAST:event_txtCarClassTypeKeyTyped

    private void txtCarCurrentLocationKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCarCurrentLocationKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if((Character.isDigit(value))||(Character.isAlphabetic(value))|| (!Character.isDigit(value))){
            evt.consume();
        }
    }//GEN-LAST:event_txtCarCurrentLocationKeyTyped

    private void btnViewCarDetailsFromTable1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewCarDetailsFromTable1ActionPerformed
        // TODO add your handling code here:
        ViewLayeredPane.setVisible(false);
        UpdateCarDetailsLayeredPane.setVisible(true);
        int selectedRowIndex = tblCarDetails.getSelectedRow();
        if (selectedRowIndex <0){
            JOptionPane.showMessageDialog(this, "Please Select a row to update");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblCarDetails.getModel();
        CarDetails selectedCarDetails = (CarDetails)model.getValueAt(selectedRowIndex, 0);
        txtManufacturerNameUpdate.setText(selectedCarDetails.getManufacturerName());
        txtModelNameUpdate.setText(selectedCarDetails.getModelName());
        txtModelNumberUpdate.setText(selectedCarDetails.getModelNumber());
        txtManufacturerYearUpdate.setText(selectedCarDetails.getManufacturerYear());
        txtUnitsAvailableUpdate.setText(String.valueOf(selectedCarDetails.getUnitsAvailable()));
        txtCarClassTypeUpdate.setText(selectedCarDetails.getCarClassType());
        txtNumberOfSeatsUpdate.setText(String.valueOf(selectedCarDetails.getNumberOfSeats()));
        txtCarCurrentLocationUpdate.setText(selectedCarDetails.getLocation());
        txtMaintenanceCertificateDateUpdate.setText(selectedCarDetails.getMaintenanceCertificateDate());
        lblAvailableCars.setText("Total Available Cars :" + detailList.size());
        lblCurrentAvailableCars.setText("Current Available car:" + String.valueOf(Math.floor(Math.random()*(model.getRowCount()-0+1)+0)));

    }//GEN-LAST:event_btnViewCarDetailsFromTable1ActionPerformed

    private void txtMaintenanceCertificateDateUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaintenanceCertificateDateUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaintenanceCertificateDateUpdateActionPerformed

    private void txtMaintenanceCertificateDateUpdateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaintenanceCertificateDateUpdateKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if((Character.isDigit(value))||(Character.isAlphabetic(value))){
            evt.consume();
        }
    }//GEN-LAST:event_txtMaintenanceCertificateDateUpdateKeyTyped

    private void txtCarCurrentLocationUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCarCurrentLocationUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCarCurrentLocationUpdateActionPerformed

    private void btnYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYearActionPerformed
        // TODO add your handling code here:
        txtManufacturerYearUpdate.setText(String.valueOf(yearchooser.getYear()));

    }//GEN-LAST:event_btnYearActionPerformed

    private void btnGetDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetDateActionPerformed
        // TODO add your handling code here:
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-YYYY");
        txtMaintenanceCertificateDateUpdate.setText(dateFormat.format(jDateChooser1.getDate()));
        
    }//GEN-LAST:event_btnGetDateActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        /*This piece of code was addded to check the validity of the data*/
        int selectedRowIndex = tblCarDetails.getSelectedRow();
        if (selectedRowIndex <0){
            JOptionPane.showMessageDialog(this, "Please Select a row to update");
            return;
        }

        short chkManuName = 0;   //Value 0 means the value passed is appropriate
        short chkModelName = 0;
        short chkModelNumber = 0;
        short chkManuYear = 0;
        short chkUnitsAvail = 0;
        short chkCarClassType = 0;
        short chkNumberOfSeats = 0;
        short chkLocation = 0;
        short chkMaintenanceCertificateDate = 0;
        try{
            if (txtManufacturerNameUpdate.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Error in provided Car Manufacturer Name Details");
                chkManuName = 1;
            }
            if (txtModelNameUpdate.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Error in provided Car Model Name Details");
                chkModelName = 1;
            }
            if (txtModelNumberUpdate.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Error in provided Car Model Number Details");
                chkModelNumber = 1;
            }
            if(txtModelNameUpdate.getText() == txtModelNumberUpdate.getText()){
            JOptionPane.showMessageDialog(null, "Model Name and Model Number cannot the same");
            txtModelNumberUpdate.setText("");
            txtModelNameUpdate.setText("");
            chkModelName = 1;
            chkModelNumber = 1;
            }
            if (txtManufacturerYearUpdate.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Error in provided Car Manufacturer Year Details");
                chkManuYear = 1;
            }
            if (txtUnitsAvailableUpdate.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Error in provided Units Available Details");
                chkUnitsAvail = 1;
            }
            if (txtCarClassTypeUpdate.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Error in provided Car Class Type Details");
                chkCarClassType = 1;
            }
            if (txtNumberOfSeatsUpdate.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Error in provided Number of Seats Details");
                chkNumberOfSeats = 1;
            }
            if (txtCarCurrentLocationUpdate.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Error in provided Current Car Location Details");
                chkLocation = 1;
            }
            if (txtMaintenanceCertificateDateUpdate.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Error in provided Maintenance Certificate Date Details");
                chkMaintenanceCertificateDate = 1;
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error in provided Car Details");
        }
        if ((chkManuName == 0) && (chkModelName == 0) && (chkModelNumber == 0) && (chkManuYear == 0) && (chkUnitsAvail == 0) && (chkCarClassType == 0) && (chkNumberOfSeats == 0) && (chkLocation == 0) &&
            (chkMaintenanceCertificateDate == 0) ) {   //Checking whether the return type is 0 as expeected
            try{
                String manufacturerName = txtManufacturerNameUpdate.getText();
                String modelName = txtModelNameUpdate.getText();
                String modelNumber = txtModelNumberUpdate.getText();
                String manufacturerYear = txtManufacturerYearUpdate.getText();
                int unitsAvailable = Integer.parseInt(txtUnitsAvailableUpdate.getText());
                String carClassType = txtCarClassTypeUpdate.getText();
                int numberOfSeats = Integer.parseInt(txtNumberOfSeatsUpdate.getText());
                String location = txtCarCurrentLocationUpdate.getText();
                String maintenanceCertificateDate = txtMaintenanceCertificateDateUpdate.getText();
                DefaultTableModel model = (DefaultTableModel) tblCarDetails.getModel();
                for (CarDetails cd : detailList){
                    for (int i=0; i<detailList.size();i++ ){
                        if((detailList.get(i).getManufacturerName() == String.valueOf(model.getValueAt(selectedRowIndex,0))) && 
                            (detailList.get(i).getModelName()== String.valueOf(model.getValueAt(selectedRowIndex,1)))&&
                            (detailList.get(i).getModelNumber()== String.valueOf(model.getValueAt(selectedRowIndex,2))) &&
                            (detailList.get(i).getManufacturerYear()== String.valueOf(model.getValueAt(selectedRowIndex,3))) &&
                            (detailList.get(i).getUnitsAvailable()== Integer.parseInt(String.valueOf(model.getValueAt(selectedRowIndex,4)))) &&
                            (detailList.get(i).getCarClassType()== String.valueOf(model.getValueAt(selectedRowIndex,5))) &&
                            (detailList.get(i).getNumberOfSeats()== Integer.parseInt(String.valueOf(model.getValueAt(selectedRowIndex,6)))) &&
                            (detailList.get(i).getLocation()== String.valueOf(model.getValueAt(selectedRowIndex,7))) &&
                            (detailList.get(i).getMaintenanceCertificateDate()== String.valueOf(model.getValueAt(selectedRowIndex,8)))){
                                detailList.get(i).setManufacturerName(manufacturerName);
                                detailList.get(i).setModelName(modelName);
                                detailList.get(i).setModelNumber(modelNumber);
                                detailList.get(i).setManufacturerYear(manufacturerYear);
                                detailList.get(i).setUnitsAvailable(unitsAvailable);
                                detailList.get(i).setCarClassType(carClassType);
                                detailList.get(i).setNumberOfSeats(numberOfSeats);
                                detailList.get(i).setLocation(location);
                                detailList.get(i).setMaintenanceCertificateDate(maintenanceCertificateDate);
                                lblAvailableCars.setText("Total Available Cars :" + detailList.size());
                                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");  
                                LocalDateTime now = LocalDateTime.now();
                                lblLastUpdatedTime.setText("Last Updated Time :" + dtf.format(now));
                            }
                    }
                }
                lblCurrentAvailableCars.setText("Current Available car:" + String.valueOf(Math.floor(Math.random()*(model.getRowCount()-0+1)+0)));
                JOptionPane.showMessageDialog(this, "New Car Details Updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Error in provided Car Details");

            }
        } else {
            JOptionPane.showMessageDialog(null, "Error in provided Car Details");
        }
        populateTable();

    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtManufacturerNameUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtManufacturerNameUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtManufacturerNameUpdateActionPerformed

    private void txtManufacturerNameUpdateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtManufacturerNameUpdateKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtManufacturerNameUpdateKeyTyped

    private void txtModelNameUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelNameUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelNameUpdateActionPerformed

    private void txtModelNumberUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelNumberUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelNumberUpdateActionPerformed

    private void txtManufacturerYearUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtManufacturerYearUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtManufacturerYearUpdateActionPerformed

    private void txtManufacturerYearUpdateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtManufacturerYearUpdateKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if((Character.isDigit(value))||(Character.isAlphabetic(value))){
            evt.consume();
        }
    }//GEN-LAST:event_txtManufacturerYearUpdateKeyTyped

    private void txtUnitsAvailableUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUnitsAvailableUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUnitsAvailableUpdateActionPerformed

    private void txtCarClassTypeUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCarClassTypeUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCarClassTypeUpdateActionPerformed

    private void txtNumberOfSeatsUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumberOfSeatsUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumberOfSeatsUpdateActionPerformed

    private void txtNumberOfSeatsUpdateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumberOfSeatsUpdateKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if((!Character.isDigit(value))||(Character.isAlphabetic(value))){
            evt.consume();
        }
    }//GEN-LAST:event_txtNumberOfSeatsUpdateKeyTyped

    private void txtSearchModelNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchModelNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchModelNumberActionPerformed

    private void txtSearchManufacturerYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchManufacturerYearActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtSearchManufacturerYearActionPerformed

    private void txtSearchCarClassTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchCarClassTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchCarClassTypeActionPerformed

    private void chkManufactureredYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkManufactureredYearActionPerformed
        // TODO add your handling code here:
        if(chkManufactureredYear.isSelected()){
            layeredManufacturerYear.setVisible(true);
            txtSearchManufacturerYear.setText("");
        }
        if(!chkManufactureredYear.isSelected()){
            layeredManufacturerYear.setVisible(false);
            txtSearchManufacturerYear.setText("");
        }
    }//GEN-LAST:event_chkManufactureredYearActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        searchLayeredPaneBase.setVisible(true);
        layeredManufacturerName.setVisible(false);
        layeredModelName.setVisible(false);
        layeredModelNumber.setVisible(false);
        layeredCarClassType.setVisible(false);
        layeredLocation.setVisible(false);
        layeredManufacturerYear.setVisible(false);
        layeredNumberOfSeats.setVisible(false);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void chkModelNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkModelNameActionPerformed
        // TODO add your handling code here:
        if(chkModelName.isSelected()){
            layeredModelName.setVisible(true);
            txtSearchModelName.setText("");
        }
        if(!chkModelName.isSelected()){
            txtSearchModelName.setText("");
            layeredModelName.setVisible(false);
        }
    }//GEN-LAST:event_chkModelNameActionPerformed

    private void chkModelNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkModelNumberActionPerformed
        // TODO add your handling code here:
        if(chkModelNumber.isSelected()){
            layeredModelNumber.setVisible(true);
            txtSearchModelNumber.setText("");
        }
        if(!chkModelNumber.isSelected()){
            layeredModelNumber.setVisible(false);
            txtSearchModelNumber.setText("");
        }
    }//GEN-LAST:event_chkModelNumberActionPerformed

    private void chkCarClassTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCarClassTypeActionPerformed
        // TODO add your handling code here:
        if(chkCarClassType.isSelected()){
            layeredCarClassType.setVisible(true);
            txtSearchCarClassType.setText("");
        }
        if(!chkCarClassType.isSelected()){
            layeredCarClassType.setVisible(false);
            txtSearchCarClassType.setText("");
        }
    }//GEN-LAST:event_chkCarClassTypeActionPerformed

    private void chkNumberOfSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNumberOfSeatsActionPerformed
        // TODO add your handling code here:
        if(chkNumberOfSeats.isSelected()){
            layeredNumberOfSeats.setVisible(true);
            txtSearchNumberOfSeatsMin.setText(""); 
            txtSearchNumberOfSeatsMax.setText(""); 
        }
        if(!chkNumberOfSeats.isSelected()){
            layeredNumberOfSeats.setVisible(false);
            DefaultTableModel dm = (DefaultTableModel) tblCarDetails.getModel();
            int rowCount = dm.getRowCount();
            //Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                dm.removeRow(i);
            }
            dm.setRowCount(0);
            populateTable();
            txtSearchNumberOfSeatsMin.setText("");
            txtSearchNumberOfSeatsMax.setText(""); 
        }
    }//GEN-LAST:event_chkNumberOfSeatsActionPerformed

    private void chkLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLocationActionPerformed
        // TODO add your handling code here:
        if(chkLocation.isSelected()){
            layeredLocation.setVisible(true);
            txtSearchLocation.setText("");            
        }
        if(!chkLocation.isSelected()){
            layeredLocation.setVisible(false);
            txtSearchLocation.setText("");
        }
    }//GEN-LAST:event_chkLocationActionPerformed

    private void chkUnitsAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkUnitsAvailableActionPerformed
        // TODO add your handling code here:
        if(chkUnitsAvailable.isSelected()){
            DefaultTableModel dm = (DefaultTableModel) tblCarDetails.getModel();
            int rowCount = dm.getRowCount();
            //Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                dm.removeRow(i);
            }
            dm.setRowCount(0);
       for (CarDetails cd : details.getDetails()){
           for (int i=0;;){                  
           Object[] row = new Object[9];
           row[0] = detailList.get(i).getManufacturerName();
           row[1] = detailList.get(i).getModelName();
           row[2] = detailList.get(i).getModelNumber();
           row[3] = detailList.get(i).getManufacturerYear();
           row[4] = detailList.get(i).getUnitsAvailable();
           row[5] = detailList.get(i).getCarClassType();
           row[6] = detailList.get(i).getNumberOfSeats();
           row[7] = detailList.get(i).getLocation();
           row[8] = detailList.get(i).getMaintenanceCertificateDate();
           dm.addRow(row);
           break;
           }
           break;
       }         
        }
        if(!chkUnitsAvailable.isSelected()){
            DefaultTableModel dm = (DefaultTableModel) tblCarDetails.getModel();
            int rowCount = dm.getRowCount();
            //Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                dm.removeRow(i);
            }
            dm.setRowCount(0);
            populateTable();

        }
    }//GEN-LAST:event_chkUnitsAvailableActionPerformed

    private void chkMaintenanceCertificateDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMaintenanceCertificateDateActionPerformed
        // TODO add your handling code here:
        if(chkMaintenanceCertificateDate.isSelected()){
            DefaultTableModel dm = (DefaultTableModel) tblCarDetails.getModel();
            int rowCount = dm.getRowCount();
            for (int i = rowCount - 1;i >= 0;i--) {
                dm.removeRow(i);
            }
            dm.setRowCount(0);
                for (int i=0;i<detailList.size();i++){
                   String  maintenanceExpiryDate = String.valueOf(detailList.get(i).getMaintenanceCertificateDate());
                   Date date1 = null;
                try {
                    date1=new SimpleDateFormat("dd-MM-yyyy").parse(maintenanceExpiryDate);
                } catch (ParseException ex) {
                    Logger.getLogger(ViewCarDetailsJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

                    Date now = new Date();
                    if(now.before(date1)){
                    Object[] row2 = new Object[9];
                    row2[0] = detailList.get(i).getManufacturerName();
                    row2[1] = detailList.get(i).getModelName();
                    row2[2] = detailList.get(i).getModelNumber();
                    row2[3] = detailList.get(i).getManufacturerYear();
                    row2[4] = detailList.get(i).getUnitsAvailable();
                    row2[5] = detailList.get(i).getCarClassType();
                    row2[6] = detailList.get(i).getNumberOfSeats();
                    row2[7] = detailList.get(i).getLocation();
                    row2[8] = detailList.get(i).getMaintenanceCertificateDate();
                    dm.addRow(row2);
                    }
           } 
          
        }
        if(!chkMaintenanceCertificateDate.isSelected()){
            DefaultTableModel dm = (DefaultTableModel) tblCarDetails.getModel();
            int rowCount = dm.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                dm.removeRow(i);
            }
            dm.setRowCount(0);
            populateTable();
        }
    }//GEN-LAST:event_chkMaintenanceCertificateDateActionPerformed

    private void txtSearchNumberOfSeatsMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchNumberOfSeatsMaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchNumberOfSeatsMaxActionPerformed

    private void txtSearchNumberOfSeatsMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchNumberOfSeatsMinActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtSearchNumberOfSeatsMinActionPerformed

    private void txtSearchModelNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchModelNameKeyReleased
        // TODO add your handling code here:
 //       populateModelNameTable(txtSearchModelName.getText());/*
        DefaultTableModel searchFunc = (DefaultTableModel) tblCarDetails.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<DefaultTableModel>(searchFunc);
        tblCarDetails.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter(txtSearchModelName.getText(),1));
        lblCurrentAvailableCars.setText("Current Available car:" + String.valueOf(Math.floor(Math.random()*(searchFunc.getRowCount()-0+1)+0)));
    }//GEN-LAST:event_txtSearchModelNameKeyReleased

    private void txtManufacturerNameUpdateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtManufacturerNameUpdateKeyReleased
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtManufacturerNameUpdateKeyReleased

    private void chkManufacturerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkManufacturerNameActionPerformed
        // TODO add your handling code here:
        if(chkManufacturerName.isSelected()){
            layeredManufacturerName.setVisible(true);
            txtSearchManufacturerName.setText("");
        }
        if(!chkManufacturerName.isSelected()){
            txtSearchManufacturerName.setText("");
            layeredManufacturerName.setVisible(false);
        }     
    }//GEN-LAST:event_chkManufacturerNameActionPerformed

    private void txtSearchManufacturerNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchManufacturerNameKeyReleased
        // TODO add your handling code here:
        DefaultTableModel searchFunc = (DefaultTableModel) tblCarDetails.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<DefaultTableModel>(searchFunc);
        tblCarDetails.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter(txtSearchManufacturerName.getText(),0));
        lblCurrentAvailableCars.setText("Current Available car:" + String.valueOf(Math.floor(Math.random()*(searchFunc.getRowCount()-0+1)+0)));
    }//GEN-LAST:event_txtSearchManufacturerNameKeyReleased

    private void txtSearchManufacturerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchManufacturerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchManufacturerNameActionPerformed

    private void txtSearchModelNumberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchModelNumberKeyReleased
        // TODO add your handling code here:
        DefaultTableModel searchFunc = (DefaultTableModel) tblCarDetails.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<DefaultTableModel>(searchFunc);
        tblCarDetails.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter(txtSearchModelNumber.getText(),2));
        lblCurrentAvailableCars.setText("Current Available car:" + String.valueOf(Math.floor(Math.random()*(searchFunc.getRowCount()-0+1)+0)));
    }//GEN-LAST:event_txtSearchModelNumberKeyReleased

    private void txtSearchManufacturerYearKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchManufacturerYearKeyReleased
        // TODO add your handling code here:
        DefaultTableModel searchFunc = (DefaultTableModel) tblCarDetails.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<DefaultTableModel>(searchFunc);
        tblCarDetails.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter(txtSearchManufacturerYear.getText(),3));
        lblCurrentAvailableCars.setText("Current Available car:" + String.valueOf(Math.floor(Math.random()*(searchFunc.getRowCount()-0+1)+0)));
    }//GEN-LAST:event_txtSearchManufacturerYearKeyReleased

    private void txtSearchCarClassTypeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchCarClassTypeKeyReleased
        // TODO add your handling code here:
        DefaultTableModel searchFunc = (DefaultTableModel) tblCarDetails.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<DefaultTableModel>(searchFunc);
        tblCarDetails.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter(txtSearchCarClassType.getText(),5));
        lblCurrentAvailableCars.setText("Current Available car:" + String.valueOf(Math.floor(Math.random()*(searchFunc.getRowCount()-0+1)+0)));
    }//GEN-LAST:event_txtSearchCarClassTypeKeyReleased

    private void txtSearchLocationKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchLocationKeyReleased
        // TODO add your handling code here:
        DefaultTableModel searchFunc = (DefaultTableModel) tblCarDetails.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<DefaultTableModel>(searchFunc);
        tblCarDetails.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter(txtSearchLocation.getText(),7));
        lblCurrentAvailableCars.setText("Current Available car:" + String.valueOf(Math.floor(Math.random()*(searchFunc.getRowCount()-0+1)+0)));
    }//GEN-LAST:event_txtSearchLocationKeyReleased

    private void btnSearchMinMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchMinMaxActionPerformed
        // TODO add your handling code here:

            int minimumValue = 0;
            int maximumValue = 0;
            int tempMaxValue = 0;
            for (int i=0;i<detailList.size();i++){
                tempMaxValue = detailList.get(i).getNumberOfSeats();
                if (tempMaxValue>maximumValue){
                    maximumValue = tempMaxValue;
                }
            }
            if(((txtSearchNumberOfSeatsMin.getText().isEmpty())&&(txtSearchNumberOfSeatsMax.getText().isEmpty())) || 
                    ((txtSearchNumberOfSeatsMin.getText().isEmpty())&&(Integer.parseInt(txtSearchNumberOfSeatsMax.getText()))>= maximumValue ) || 
                    ((Integer.parseInt(txtSearchNumberOfSeatsMin.getText())== 0)&&(Integer.parseInt(txtSearchNumberOfSeatsMax.getText()))== 0)){
                populateTable();
            }else if((minimumValue<=Integer.parseInt(txtSearchNumberOfSeatsMin.getText()))&& (maximumValue > Integer.parseInt(txtSearchNumberOfSeatsMax.getText()))){
                minimumValue = Integer.parseInt(txtSearchNumberOfSeatsMin.getText());
                maximumValue = Integer.parseInt(txtSearchNumberOfSeatsMax.getText());
                DefaultTableModel dm = (DefaultTableModel) tblCarDetails.getModel();
                int rowCount = dm.getRowCount();
                for (int i = rowCount - 1; i >= 0; i--) {
                        dm.removeRow(i);
                    }
                dm.setRowCount(0);
                for (int i=0;i<detailList.size();i++){
                    if((detailList.get(i).getNumberOfSeats()>= minimumValue) && (detailList.get(i).getNumberOfSeats()<= maximumValue)){
                        Object[] row3 = new Object[9];
                    row3[0] = detailList.get(i).getManufacturerName();
                    row3[1] = detailList.get(i).getModelName();
                    row3[2] = detailList.get(i).getModelNumber();
                    row3[3] = detailList.get(i).getManufacturerYear();
                    row3[4] = detailList.get(i).getUnitsAvailable();
                    row3[5] = detailList.get(i).getCarClassType();
                    row3[6] = detailList.get(i).getNumberOfSeats();
                    row3[7] = detailList.get(i).getLocation();
                    row3[8] = detailList.get(i).getMaintenanceCertificateDate();
                    dm.addRow(row3);
                    }
                }
            
            }
            
    }//GEN-LAST:event_btnSearchMinMaxActionPerformed

    private void txtSearchNumberOfSeatsMinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchNumberOfSeatsMinKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if((!Character.isDigit(value))||(Character.isAlphabetic(value))){
            evt.consume();
        }
    }//GEN-LAST:event_txtSearchNumberOfSeatsMinKeyTyped

    private void txtSearchNumberOfSeatsMaxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchNumberOfSeatsMaxKeyTyped
        // TODO add your handling code here:
        char value = evt.getKeyChar();
        if((!Character.isDigit(value))||(Character.isAlphabetic(value))){
            evt.consume();
        }
    }//GEN-LAST:event_txtSearchNumberOfSeatsMaxKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane UpdateCarDetailsLayeredPane;
    private javax.swing.JLayeredPane ViewLayeredPane;
    private javax.swing.JButton btnDeleteCarDetailsFromTable;
    private javax.swing.JButton btnGetDate;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchMinMax;
    private javax.swing.JButton btnViewCarDetailsFromTable;
    private javax.swing.JButton btnViewCarDetailsFromTable1;
    private javax.swing.JButton btnYear;
    private javax.swing.JCheckBox chkCarClassType;
    private javax.swing.JCheckBox chkLocation;
    private javax.swing.JCheckBox chkMaintenanceCertificateDate;
    private javax.swing.JCheckBox chkManufacturerName;
    private javax.swing.JCheckBox chkManufactureredYear;
    private javax.swing.JCheckBox chkModelName;
    private javax.swing.JCheckBox chkModelNumber;
    private javax.swing.JCheckBox chkNumberOfSeats;
    private javax.swing.JCheckBox chkUnitsAvailable;
    private javax.swing.JLabel imgViewCar;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLayeredPane layeredCarClassType;
    private javax.swing.JLayeredPane layeredLocation;
    private javax.swing.JLayeredPane layeredManufacturerName;
    private javax.swing.JLayeredPane layeredManufacturerYear;
    private javax.swing.JLayeredPane layeredModelName;
    private javax.swing.JLayeredPane layeredModelNumber;
    private javax.swing.JLayeredPane layeredNumberOfSeats;
    private java.awt.Label lblAvailableCars;
    private javax.swing.JLabel lblCarClassType;
    private javax.swing.JLabel lblCarClassType1;
    private javax.swing.JLabel lblCarCurrentLocation;
    private javax.swing.JLabel lblCarCurrentLocation1;
    private javax.swing.JLabel lblCarCurrentLocation2;
    private javax.swing.JLabel lblCarCurrentLocation3;
    private java.awt.Label lblCurrentAvailableCars;
    private java.awt.Label lblLastUpdatedTime;
    private javax.swing.JLabel lblManufactureYear;
    private javax.swing.JLabel lblManufactureYear1;
    private javax.swing.JLabel lblManufacturerName;
    private javax.swing.JLabel lblManufacturerName1;
    private javax.swing.JLabel lblMaximum;
    private javax.swing.JLabel lblMinimum;
    private javax.swing.JLabel lblModelName;
    private javax.swing.JLabel lblModelName1;
    private javax.swing.JLabel lblModelNumber;
    private javax.swing.JLabel lblModelNumber1;
    private javax.swing.JLabel lblNumberOfSeats;
    private javax.swing.JLabel lblNumberOfSeats1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUnitsAvailable;
    private javax.swing.JLabel lblUnitsAvailable1;
    private javax.swing.JLayeredPane searchLayeredPaneBase;
    private javax.swing.JTable tblCarDetails;
    private javax.swing.JTextField txtCarClassType;
    private javax.swing.JTextField txtCarClassTypeUpdate;
    private javax.swing.JTextField txtCarCurrentLocation;
    private javax.swing.JTextField txtCarCurrentLocationUpdate;
    private javax.swing.JTextField txtMaintenanceCertificateDate;
    private javax.swing.JTextField txtMaintenanceCertificateDateUpdate;
    private javax.swing.JTextField txtManufacturerName;
    private javax.swing.JTextField txtManufacturerNameUpdate;
    private javax.swing.JTextField txtManufacturerYear;
    private javax.swing.JTextField txtManufacturerYearUpdate;
    private javax.swing.JTextField txtModelName;
    private javax.swing.JTextField txtModelNameUpdate;
    private javax.swing.JTextField txtModelNumber;
    private javax.swing.JTextField txtModelNumberUpdate;
    private javax.swing.JTextField txtNumberOfSeats;
    private javax.swing.JTextField txtNumberOfSeatsUpdate;
    private javax.swing.JTextField txtSearchCarClassType;
    private javax.swing.JTextField txtSearchLocation;
    private javax.swing.JTextField txtSearchManufacturerName;
    private javax.swing.JTextField txtSearchManufacturerYear;
    private javax.swing.JTextField txtSearchModelName;
    private javax.swing.JTextField txtSearchModelNumber;
    private javax.swing.JTextField txtSearchNumberOfSeatsMax;
    private javax.swing.JTextField txtSearchNumberOfSeatsMin;
    private javax.swing.JTextField txtUnitsAvailable;
    private javax.swing.JTextField txtUnitsAvailableUpdate;
    private javax.swing.JScrollPane viewScrollPane;
    private com.toedter.calendar.JYearChooser yearchooser;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
       DefaultTableModel model = (DefaultTableModel) tblCarDetails.getModel();
       model.setRowCount(0);
       
       for (CarDetails cd : details.getDetails()){
           Object[] row = new Object[9];
           row[0] = cd;
           row[1] = cd.getModelName();
           row[2] = cd.getModelNumber();
           row[3] = cd.getManufacturerYear();
           row[4] = cd.getUnitsAvailable();
           row[5] = cd.getCarClassType();
           row[6] = cd.getNumberOfSeats();
           row[7] = cd.getLocation();
           row[8] = cd.getMaintenanceCertificateDate();
           model.addRow(row);
           
       }
       lblCurrentAvailableCars.setText("Current Available car:" + String.valueOf(Math.floor(Math.random()*(model.getRowCount()-0+1)+0)));
    }
}
