/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.EcoSystem;
import java.awt.CardLayout;
import java.awt.Color;
import javax.swing.JPanel;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.apache.log4j.Logger;
import org.jfree.chart.plot.PiePlot3D;

/**
 *
 * @author deepa
 */
public class ViewReportsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewReportsJPanel
     */
    JPanel userProcessContainer;
    EcoSystem system;
    String[] values;
    String geneValues;
    List<String> networkList;
    List<String> diseaseList;
    List<String> medicineList;
    List<String> geneList;
    private static Logger log = Logger.getLogger(ViewReportsJPanel.class);
    private static final String CLASS_NAME = ViewReportsJPanel.class.getName();

    public ViewReportsJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.networkList = new ArrayList<>();
        this.diseaseList = new ArrayList<>();
        this.medicineList = new ArrayList<>();
        this.geneList = new ArrayList<>();
        addMedicines();
        addGenes();
        this.setSize(1920, 1080);
    }

    public void addGenes() {
        try {
            String filePat = "./genes data.txt";
            File file = new File(filePat);
            Scanner input = new Scanner(file);

            while (input.hasNext()) {
                String data = input.next();
                geneValues = data;
                geneList.add(geneValues);
                System.out.println(geneValues);
            }

        } catch (FileNotFoundException ex) {

            log.error("genes data.txt" + ex);
        }

    }

    public void addMedicines() {
        try {
            String filePath = "./prescription data.txt";
            File file = new File(filePath);
            Scanner input = new Scanner(file);

            while (input.hasNext()) {
                String data = input.next();
                values = data.split(",");
                networkList.add(values[0].trim());
                diseaseList.add(values[1].trim());
                medicineList.add(values[2].trim());
                System.out.println(values[2]);
            }

        } catch (Exception ex) {
            log.error("prescription data.txt not found" + ex);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        report1Btn = new javax.swing.JButton();
        report2Btn = new javax.swing.JButton();
        report3Btn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(52, 148, 172));
        setPreferredSize(new java.awt.Dimension(2000, 1200));

        report1Btn.setBackground(new java.awt.Color(204, 255, 204));
        report1Btn.setText("TOP MEDICINE SALES ACROSS NETWORKS");
        report1Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                report1BtnActionPerformed(evt);
            }
        });

        report2Btn.setBackground(new java.awt.Color(204, 255, 204));
        report2Btn.setText("MOST COMMON DISEASES ACROSS NETWORKS");
        report2Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                report2BtnActionPerformed(evt);
            }
        });

        report3Btn.setBackground(new java.awt.Color(204, 255, 204));
        report3Btn.setText("MOST AFFECTED GENES");
        report3Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                report3BtnActionPerformed(evt);
            }
        });

        backBtn.setBackground(new java.awt.Color(204, 255, 204));
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(backBtn)
                    .addComponent(report3Btn)
                    .addComponent(report2Btn)
                    .addComponent(report1Btn))
                .addContainerGap(1634, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {backBtn, report1Btn, report2Btn, report3Btn});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(report1Btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(report2Btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(report3Btn)
                .addGap(18, 18, 18)
                .addComponent(backBtn)
                .addContainerGap(984, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void report1BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_report1BtnActionPerformed

        DefaultCategoryDataset dcd = new DefaultCategoryDataset();
        int Galafold = 0, Onpattro = 0, Revcovi = 0, Tegsedi = 0, Haegarda = 0, Brineura = 0, Mepsevii = 0, Spinraza = 0;
        int Galafold1 = 0, Onpattro1 = 0, Revcovi1 = 0, Tegsedi1 = 0, Haegarda1 = 0, Brineura1 = 0, Mepsevii1 = 0, Spinraza1 = 0;
        int Galafold2 = 0, Onpattro2 = 0, Revcovi2 = 0, Tegsedi2 = 0, Haegarda2 = 0, Brineura2 = 0, Mepsevii2 = 0, Spinraza2 = 0;

        for (int i = 0; i < medicineList.size(); i++) {
            String network = networkList.get(i);
            String disease = diseaseList.get(i);
            String medicine = medicineList.get(i);

            if ((network.equalsIgnoreCase("Boston")) && medicine.equalsIgnoreCase("Galafold")) {
                Galafold++;
            }
            if ((network.equalsIgnoreCase("Boston")) && medicine.equalsIgnoreCase("Onpattro")) {
                Onpattro++;
            }
            if ((network.equalsIgnoreCase("Boston")) && medicine.equalsIgnoreCase("Revcovi")) {
                Revcovi++;
            }
            if ((network.equalsIgnoreCase("Boston")) && medicine.equalsIgnoreCase("Tegsedi")) {
                Tegsedi++;
            }
            if ((network.equalsIgnoreCase("Boston")) && medicine.equalsIgnoreCase("Haegarda")) {
                Haegarda++;
            }
            if ((network.equalsIgnoreCase("Boston")) && medicine.equalsIgnoreCase("Brineura")) {
                Brineura++;
            }
            if ((network.equalsIgnoreCase("Boston")) && medicine.equalsIgnoreCase("Mepsevii")) {
                Mepsevii++;
            }
            if ((network.equalsIgnoreCase("Boston")) && medicine.equalsIgnoreCase("Spinraza")) {
                Spinraza++;
            }

        }
        dcd.setValue(Galafold, "Boston", "Galafold");
        dcd.setValue(Onpattro, "Boston", "Onpattro");
        dcd.setValue(Revcovi, "Boston", "Revcovi");
        dcd.setValue(Tegsedi, "Boston", "Tegsedi");
        dcd.setValue(Haegarda, "Boston", "Haegarda");
        dcd.setValue(Brineura, "Boston", "Brineura");
        dcd.setValue(Mepsevii, "Boston", "Mepsevii");
        dcd.setValue(Spinraza, "Boston", "Spinraza");

        JFreeChart jchart = ChartFactory.createBarChart("Top Medicines By Sales", "Networks", "Sales", dcd, PlotOrientation.VERTICAL, true, true, false);

        CategoryPlot plot = jchart.getCategoryPlot();
        plot.setRangeGridlinePaint(Color.BLACK);

        ChartFrame chartFrame = new ChartFrame("Medicines", jchart, true);
        chartFrame.setVisible(true);
        chartFrame.setSize(800, 600);

        for (int i = 0; i < medicineList.size(); i++) {
            String network = networkList.get(i);
            String disease = diseaseList.get(i);
            String medicine = medicineList.get(i);

            if ((network.equalsIgnoreCase("California")) && medicine.equalsIgnoreCase("Galafold")) {
                Galafold1++;
            }
            if ((network.equalsIgnoreCase("California")) && medicine.equalsIgnoreCase("Onpattro")) {
                Onpattro1++;
            }
            if ((network.equalsIgnoreCase("California")) && medicine.equalsIgnoreCase("Revcovi")) {
                Revcovi1++;
            }
            if ((network.equalsIgnoreCase("California")) && medicine.equalsIgnoreCase("Tegsedi")) {
                Tegsedi1++;
            }
            if ((network.equalsIgnoreCase("California")) && medicine.equalsIgnoreCase("Haegarda")) {
                Haegarda1++;
            }
            if ((network.equalsIgnoreCase("California")) && medicine.equalsIgnoreCase("Brineura")) {
                Brineura1++;
            }
            if ((network.equalsIgnoreCase("California")) && medicine.equalsIgnoreCase("Mepsevii")) {
                Mepsevii1++;
            }
            if ((network.equalsIgnoreCase("California")) && medicine.equalsIgnoreCase("Spinraza")) {
                Spinraza1++;
            }

        }
        dcd.setValue(Galafold1, "California", "Galafold");
        dcd.setValue(Onpattro1, "California", "Onpattro");
        dcd.setValue(Revcovi1, "California", "Revcovi");
        dcd.setValue(Tegsedi1, "California", "Tegsedi");
        dcd.setValue(Haegarda1, "California", "Haegarda");
        dcd.setValue(Brineura1, "California", "Brineura");
        dcd.setValue(Mepsevii1, "California", "Mepsevii");
        dcd.setValue(Spinraza1, "California", "Spinraza");

        CategoryPlot plot1 = jchart.getCategoryPlot();
        plot1.setRangeGridlinePaint(Color.BLACK);

        for (int i = 0; i < medicineList.size(); i++) {
            String network = networkList.get(i);
            String disease = diseaseList.get(i);
            String medicine = medicineList.get(i);

            if ((network.equalsIgnoreCase("Dallas")) && medicine.equalsIgnoreCase("Galafold")) {
                Galafold2++;
            }
            if ((network.equalsIgnoreCase("Dallas")) && medicine.equalsIgnoreCase("Onpattro")) {
                Onpattro2++;
            }
            if ((network.equalsIgnoreCase("Dallas")) && medicine.equalsIgnoreCase("Revcovi")) {
                Revcovi2++;
            }
            if ((network.equalsIgnoreCase("Dallas")) && medicine.equalsIgnoreCase("Tegsedi")) {
                Tegsedi2++;
            }
            if ((network.equalsIgnoreCase("Dallas")) && medicine.equalsIgnoreCase("Haegarda")) {
                Haegarda2++;
            }
            if ((network.equalsIgnoreCase("Dallas")) && medicine.equalsIgnoreCase("Brineura")) {
                Brineura2++;
            }
            if ((network.equalsIgnoreCase("Dallas")) && medicine.equalsIgnoreCase("Mepsevii")) {
                Mepsevii2++;
            }
            if ((network.equalsIgnoreCase("Dallas")) && medicine.equalsIgnoreCase("")) {
                Spinraza2++;
            }

        }
        dcd.setValue(Galafold2, "Dallas", "Galafold");
        dcd.setValue(Onpattro2, "Dallas", "Onpattro");
        dcd.setValue(Revcovi2, "Dallas", "Revcovi");
        dcd.setValue(Tegsedi2, "Dallas", "Tegsedi");
        dcd.setValue(Haegarda2, "Dallas", "Haegarda");
        dcd.setValue(Brineura2, "Dallas", "Brineura");
        dcd.setValue(Mepsevii2, "Dallas", "Mepsevii");
        dcd.setValue(Spinraza2, "Dallas", "Spinraza");

        CategoryPlot plot2 = jchart.getCategoryPlot();
        plot2.setRangeGridlinePaint(Color.BLACK);
    }//GEN-LAST:event_report1BtnActionPerformed

    private void report2BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_report2BtnActionPerformed

        DefaultCategoryDataset dcd = new DefaultCategoryDataset();
        int Achondroplasia = 0, Marfansyndrome = 0, Cysticfibrosis = 0, TaySachs = 0, Haemophilia = 0, Mosaicism = 0, Downsyndrome = 0, Turnersyndrome = 0;
        int Achondroplasia1 = 0, Marfansyndrome1 = 0, Cysticfibrosis1 = 0, TaySachs1 = 0, Haemophilia1 = 0, Mosaicism1 = 0, Downsyndrome1 = 0, Turnersyndrome1 = 0;
        int Achondroplasia2 = 0, Marfansyndrome2 = 0, Cysticfibrosis2 = 0, TaySachs2 = 0, Haemophilia2 = 0, Mosaicism2 = 0, Downsyndrome2 = 0, Turnersyndrome2 = 0;

        for (int i = 0; i < medicineList.size(); i++) {
            String network = networkList.get(i);
            String disease = diseaseList.get(i);
            String medicine = medicineList.get(i);

            if ((network.equalsIgnoreCase("Boston")) && disease.equalsIgnoreCase("Achondroplasia")) {
                Achondroplasia++;
            }
            if ((network.equalsIgnoreCase("Boston")) && disease.equalsIgnoreCase("Marfansyndrome")) {
                Marfansyndrome++;
            }
            if ((network.equalsIgnoreCase("Boston")) && disease.equalsIgnoreCase("Cysticfibrosis")) {
                Cysticfibrosis++;
            }
            if ((network.equalsIgnoreCase("Boston")) && disease.equalsIgnoreCase("TaySachs")) {
                TaySachs++;
            }
            if ((network.equalsIgnoreCase("Boston")) && disease.equalsIgnoreCase("Haemophilia")) {
                Haemophilia++;
            }
            if ((network.equalsIgnoreCase("Boston")) && disease.equalsIgnoreCase("Mosaicism")) {
                Mosaicism++;
            }
            if ((network.equalsIgnoreCase("Boston")) && disease.equalsIgnoreCase("Downsyndrome")) {
                Downsyndrome++;
            }
            if ((network.equalsIgnoreCase("Boston")) && disease.equalsIgnoreCase("Turnersyndrome")) {
                Turnersyndrome++;
            }

        }
        dcd.setValue(Achondroplasia, "Boston", "Achondroplasia");
        dcd.setValue(Marfansyndrome, "Boston", "Marfansyndrome");
        dcd.setValue(Cysticfibrosis, "Boston", "Cysticfibrosis");
        dcd.setValue(TaySachs, "Boston", "TaySachs");
        dcd.setValue(Haemophilia, "Boston", "Haemophilia");
        dcd.setValue(Mosaicism, "Boston", "Mosaicism");
        dcd.setValue(Downsyndrome, "Boston", "Downsyndrome");
        dcd.setValue(Turnersyndrome, "Boston", "Turnersyndrome");

        JFreeChart jchart = ChartFactory.createBarChart("Most common diseases", "Networks", "count", dcd, PlotOrientation.VERTICAL, true, true, false);

        CategoryPlot plot = jchart.getCategoryPlot();
        plot.setRangeGridlinePaint(Color.BLACK);

        ChartFrame chartFrame = new ChartFrame("Medicines", jchart, true);
        chartFrame.setVisible(true);
        chartFrame.setSize(800, 600);

        for (int i = 0; i < medicineList.size(); i++) {
            String network = networkList.get(i);
            String disease = diseaseList.get(i);
            String medicine = medicineList.get(i);

            if ((network.equalsIgnoreCase("California")) && disease.equalsIgnoreCase("Achondroplasia")) {
                Achondroplasia1++;
            }
            if ((network.equalsIgnoreCase("California")) && disease.equalsIgnoreCase("Marfansyndrome")) {
                Marfansyndrome1++;
            }
            if ((network.equalsIgnoreCase("California")) && disease.equalsIgnoreCase("Cysticfibrosis")) {
                Cysticfibrosis1++;
            }
            if ((network.equalsIgnoreCase("California")) && disease.equalsIgnoreCase("TaySachs")) {
                TaySachs1++;
            }
            if ((network.equalsIgnoreCase("California")) && disease.equalsIgnoreCase("Haemophilia")) {
                Haemophilia1++;
            }
            if ((network.equalsIgnoreCase("California")) && disease.equalsIgnoreCase("Mosaicism")) {
                Mosaicism1++;
            }
            if ((network.equalsIgnoreCase("California")) && disease.equalsIgnoreCase("Downsyndrome")) {
                Downsyndrome1++;
            }
            if ((network.equalsIgnoreCase("California")) && disease.equalsIgnoreCase("Turnersyndrome")) {
                Turnersyndrome1++;
            }

        }
        dcd.setValue(Achondroplasia1, "California", "Achondroplasia");
        dcd.setValue(Marfansyndrome1, "California", "Marfansyndrome");
        dcd.setValue(Cysticfibrosis1, "California", "Cysticfibrosis");
        dcd.setValue(TaySachs1, "California", "TaySachs");
        dcd.setValue(Haemophilia1, "California", "Haemophilia");
        dcd.setValue(Mosaicism1, "California", "Mosaicism");
        dcd.setValue(Downsyndrome1, "California", "Downsyndrome");
        dcd.setValue(Turnersyndrome1, "California", "Turnersyndrome");

        CategoryPlot plot1 = jchart.getCategoryPlot();
        plot1.setRangeGridlinePaint(Color.BLACK);

        for (int i = 0; i < medicineList.size(); i++) {
            String network = networkList.get(i);
            String disease = diseaseList.get(i);
            String medicine = medicineList.get(i);

            if ((network.equalsIgnoreCase("Dallas")) && disease.equalsIgnoreCase("Achondroplasia")) {
                Achondroplasia2++;
            }
            if ((network.equalsIgnoreCase("Dallas")) && disease.equalsIgnoreCase("Marfansyndrome")) {
                Marfansyndrome2++;
            }
            if ((network.equalsIgnoreCase("Dallas")) && disease.equalsIgnoreCase("Cysticfibrosis")) {
                Cysticfibrosis2++;
            }
            if ((network.equalsIgnoreCase("Dallas")) && disease.equalsIgnoreCase("TaySachs")) {
                TaySachs2++;
            }
            if ((network.equalsIgnoreCase("Dallas")) && disease.equalsIgnoreCase("Haemophilia")) {
                Haemophilia2++;
            }
            if ((network.equalsIgnoreCase("Dallas")) && disease.equalsIgnoreCase("Mosaicism")) {
                Mosaicism2++;
            }
            if ((network.equalsIgnoreCase("Dallas")) && disease.equalsIgnoreCase("Downsyndrome")) {
                Downsyndrome2++;
            }
            if ((network.equalsIgnoreCase("Dallas")) && disease.equalsIgnoreCase("Turnersyndrome")) {
                Turnersyndrome2++;
            }

        }
        dcd.setValue(Achondroplasia2, "Dallas", "Achondroplasia");
        dcd.setValue(Marfansyndrome2, "Dallas", "Marfansyndrome");
        dcd.setValue(Cysticfibrosis2, "Dallas", "Cysticfibrosis");
        dcd.setValue(TaySachs2, "Dallas", "TaySachs");
        dcd.setValue(Haemophilia2, "Dallas", "Haemophilia");
        dcd.setValue(Mosaicism2, "Dallas", "Mosaicism");
        dcd.setValue(Downsyndrome2, "Dallas", "Downsyndrome");
        dcd.setValue(Turnersyndrome2, "Dallas", "Turnersyndrome");

        CategoryPlot plot2 = jchart.getCategoryPlot();
        plot2.setRangeGridlinePaint(Color.BLACK);
    }//GEN-LAST:event_report2BtnActionPerformed

    private void report3BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_report3BtnActionPerformed

        DefaultPieDataset dcd = new DefaultPieDataset();
        int A2M = 0, BAX = 0, CAT = 0, DLL3 = 0, EGF = 0, FOS = 0, GH1 = 0, HSF1 = 0, IGF1 = 0, LEP = 0;
        for (int i = 0; i < geneList.size(); i++) {
            String gene = geneList.get(i);

            if (gene.equalsIgnoreCase("A2M")) {
                A2M++;
            }
            if (gene.equalsIgnoreCase("BAX")) {
                BAX++;
            }
            if (gene.equalsIgnoreCase("CAT")) {
                CAT++;
            }
            if (gene.equalsIgnoreCase("DLL3")) {
                DLL3++;
            }
            if (gene.equalsIgnoreCase("EGF")) {
                EGF++;
            }
            if (gene.equalsIgnoreCase("FOS")) {
                FOS++;
            }
            if (gene.equalsIgnoreCase("GH1")) {
                GH1++;
            }
            if (gene.equalsIgnoreCase("HSF1")) {
                HSF1++;
            }
            if (gene.equalsIgnoreCase("IGF1")) {
                IGF1++;
            }
            if (gene.equalsIgnoreCase("LEP")) {
                LEP++;
            }
        }
        dcd.setValue("A2M", A2M);
        dcd.setValue("BAX", BAX);
        dcd.setValue("CAT", CAT);
        dcd.setValue("DLL3", DLL3);
        dcd.setValue("EGF", EGF);
        dcd.setValue("FOS", FOS);
        dcd.setValue("GH1", GH1);
        dcd.setValue("HSF1", HSF1);
        dcd.setValue("IGF1", IGF1);
        dcd.setValue("LEP", LEP);

        JFreeChart chart = ChartFactory.createPieChart3D("Predominent Gene in Diseases", dcd, true, true, true);
        PiePlot3D plot = (PiePlot3D) chart.getPlot();

        ChartFrame panel = new ChartFrame("Pie Chart", chart);
        panel.setVisible(true);
        panel.setSize(800, 600);
    }//GEN-LAST:event_report3BtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton report1Btn;
    private javax.swing.JButton report2Btn;
    private javax.swing.JButton report3Btn;
    // End of variables declaration//GEN-END:variables
}
